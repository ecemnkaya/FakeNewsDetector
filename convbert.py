# -*- coding: utf-8 -*-
"""ConvBert.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BY236u-kjI5BEWnYzrzTDB6UP5jh5ThS
"""

pip install transformers accelerate

pip install transformers
pip install --upgrade transformers

pip install datasets

pip install pyarrow

import pandas as pd
import numpy as np
import torch
from nltk.corpus import stopwords
import torch.nn as nn
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from torch.optim import Adam
from torch.utils.data import TensorDataset, RandomSampler, DataLoader, SequentialSampler
from transformers import ConvBertTokenizer, ConvBertForSequenceClassification
from transformers import ConvBertTokenizer, ConvBertForMaskedLM
from transformers import ConvBertTokenizer, ConvBertModel, AdamW
import transformers
from transformers import AutoTokenizer, AutoModelForSequenceClassification
from transformers import TrainingArguments, Trainer
import typing
from typing import Dict
import pyarrow as pa
from datasets import Dataset
from sklearn.metrics import f1_score, accuracy_score, recall_score, precision_score

"""# DF PREPROCESSING STEPS"""

data_path = 'clean_news.csv'
df = pd.read_csv(data_path, error_bad_lines=False)

df.head()

df.shape

df1 = pd.DataFrame(df)
print(df1.count())

from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained('dbmdz/convbert-base-turkish-mc4-cased')

text = "This is an example sentence for tokenization."
tokens = tokenizer.tokenize(text)

print("Number of tokens:", len(tokens))

print(tokens)

print("Vocabulary:", tokenizer.get_vocab())

df.head()

df.shape

def process_data(row):
        # Clean the text
        text = row['Body']
        text = str(text)
        text = ' '.join(text.split())
        # Get tokens
        encodings = tokenizer(text, padding="max_length", truncation=True, max_length=128)
        # Convert string to integers
        label = 0
        if row['Label'] == 'gerçek':
            label += 1

        encodings['label'] = label
        encodings['text'] = text

        return encodings

print(process_data({
        'Body': 'this is a body text of news.',
        'Label': 'gerçek'
    }))

processed_data = []
for i in range(len(df[:4455])):
 processed_data.append(process_data(df.iloc[i]))

new_df = pd.DataFrame(processed_data)
  
train_df, valid_df = train_test_split(
        new_df,
        test_size=0.2,
        random_state=2022
    )

new_df.head()

train_df.shape

valid_df.shape

train_hg = Dataset(pa.Table.from_pandas(train_df))
valid_hg = Dataset(pa.Table.from_pandas(valid_df))

train_hg.shape

def compute_metrics(p):
    print(type(p))
    pred, labels = p
    pred = np.argmax(pred, axis=1)

    accuracy = accuracy_score(y_true=labels, y_pred=pred)
    recall = recall_score(y_true=labels, y_pred=pred)
    precision = precision_score(y_true=labels, y_pred=pred)
    f1 = f1_score(y_true=labels, y_pred=pred)

    return {"accuracy": accuracy, "precision": precision, "recall": recall, "f1": f1}

from transformers import AutoModelForSequenceClassification

model = AutoModelForSequenceClassification.from_pretrained(
        'dbmdz/convbert-base-turkish-mc4-cased',
        num_labels=2
    )

training_args = TrainingArguments(output_dir="./result", evaluation_strategy="epoch", num_train_epochs= 5.0)

trainer = Trainer(
        model=model,
        args=training_args,
        train_dataset=train_hg,
        eval_dataset=valid_hg,
        tokenizer=tokenizer,
        compute_metrics=compute_metrics
    )

trainer.train()

trainer.evaluate()

model.save_pretrained('./saved_model/')

tokenizer.save_pretrained('./saved_model/')

#import shutil

#shutil.make_archive("/content/saved_model/Convbertsavemodel/", 'zip', "/content/saved_model/")

def edizvaluate(text):
    news_text=text
    encoded_text = tokenizer(news_text, padding="max_length", truncation=True, max_length=128, return_tensors="pt")

    # Move the model to cuda:0
    model.to('cuda:0')

    # Move the encoded_text tensors to cuda:0
    encoded_text = {k: v.to('cuda:0') for k, v in encoded_text.items()}

    # Perform inference on cuda:0
    output = model(**encoded_text)

    # Move the output logits tensor to CPU for further processing
    logits = output.logits.to('cpu')

    # Find the predicted label on CPU
    predicted_label = torch.argmax(logits).item()

    # Determine the predicted class
    predicted_class = "FAKE ❌" if predicted_label == 0 else "TRUE ✅"

    # Print the predicted class
    return predicted_class

news_text= "example input text"

print("Result:", edizvaluate(news_text))

!pip install flask pyngrok

import socket
import os
from flask import Flask, render_template, request
from IPython.display import display, HTML
from pyngrok import ngrok

# Set your ngrok auth token
ngrok.set_auth_token("2Q4gRbz5J7KRlOCdehkXnuxG4hC_7GBJkYjnc5JnmbJkCPrDp")

app = Flask(__name__)

@app.route('/', methods=['GET'])
def home():
    return render_template('index.html')

@app.route('/evaluate', methods=['POST'])
def evaluate():
    news_text = request.form['news_text']
    result = edizvaluate(news_text)
    return render_template('result.html', result=result)

!mkdir templates

index_html = '''
<html>
<head>
<link rel="icon" type="image/x-icon" href="https://www.bilgi.edu.tr/static/images/icons/favicon-192.png">
    <title>Turkish Fake News Detector</title>
    <style>
        body {
            background-color: #f2f2f2;
            font-family: "Times New Roman", Times, serif;
            margin: 0;
            padding: 0;
        }
        .container {
            max-width: 500px;
            margin: 50px auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
        }
        textarea {
            width: 100%;
            height: 150px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            resize: vertical;
        }
        input[type="submit"] {
            background-color: #1c589c;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <div class="container">

        <div class="image-container">
            <img src="https://tbl.bilgi.edu.tr/brand-resources/logotypes/bilgi/colored/bilgi-logotype-en.png" alt="Bilgi University Logo" style="width: 60%;">
        </div>
                <div class="header">
            <h1>Enter the News</h1>
        </div>
        <form action="/evaluate" method="post">
            <textarea name="news_text" rows="10" cols="50" required></textarea><br><br>
            <input type="submit" value="Evaluate">
        </form>
    </div>
</body>
</html>
'''

result_html = '''
<html>
<head>
<link rel="icon" type="image/x-icon" href="https://www.bilgi.edu.tr/static/images/icons/favicon-192.png">
    <title>Turkish Fake News Detector</title>
    <style>
        body {
            background-color: #f2f2f2;
            font-family: "Times New Roman", Times, serif;
            margin: 0;
            padding: 0;
        }
        .container {
            max-width: 500px;
            margin: 50px auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        input[type="submit"] {
            background-color: #1c589c;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        h1 {
            text-align: center;
        }
        p {
            margin-top: 20px;
        }
        .fake {
            color: red;
            font-size: 20px;
            text-align: center;
        }
        .true {
            color: green;
            font-size: 20px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
<div class="image-container">
            <img src="https://tbl.bilgi.edu.tr/brand-resources/logotypes/bilgi/colored/bilgi-logotype-en.png" alt="Bilgi University Logo" style="width: 60%;">
        </div>
                <div class="header">
            <h1>The news is</h1>
        </div>
        <p class="{{ result }}">{{ result }}</p>
        <form action="/" method="GET">
            <br>
            <input type="submit" value="Back">
        </form>
    </div>
</body>

</html>
'''

with open('templates/index.html', 'w') as f:
    f.write(index_html)


with open('templates/result.html', 'w') as f:
    f.write(result_html)

@app.route('/show')
def show():
    display(HTML('<a href="/evaluate">Click here to go to the input page</a>'))

if __name__ == '__main__':
    app_port = 8000
    public_url = ngrok.connect(app_port).public_url
    print(f"Web Server URL: {public_url}")
    app.run(port=app_port, host='localhost')
